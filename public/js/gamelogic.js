import { animals, questions } from './data.js';

let currentLevel = 1;
let currentRound = 1;
let score = 0;
let totalTime = 0; // –°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã
let timerId;       // —Ç–∞–π–º–µ—Ä —Ä–∞—É–Ω–¥–∞ (–æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç)
let timerInterval; // —Ç–∞–π–º–µ—Ä –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–≤—Å–µ–π –∏–≥—Ä—ã)
let timeLimit;

window.onload = () => {
  initGame();
};

// ------------------------------------------------
// 1) –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
// ------------------------------------------------

function initGame() {
  startGlobalTimer();
  startGame();
}

function startGame() {
  // –ü–æ–∫–∞–∂–µ–º —É—Ä–æ–≤–µ–Ω—å
  document.getElementById('levelDisplay').textContent = `–£—Ä–æ–≤–µ–Ω—å: ${currentLevel}`;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞ —É—Ä–æ–≤–Ω–µ (—Ç–∞–π–º–µ—Ä)
  switch (currentLevel) {
    case 1: timeLimit = 30; break;  // +10 / -5
    case 2: timeLimit = 20; break;  // +15 / -10
    case 3: timeLimit = 10; break;  // +20 / -10
  }

  startRoundTimer();
  generateQuestion();
}

// ------------------------------------------------
// 2) –¢–∞–π–º–µ—Ä—ã
// ------------------------------------------------

let remainingTime; // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏

function startRoundTimer(resumeTime = null) {
  remainingTime = resumeTime !== null ? resumeTime : timeLimit; 
  displayTimeLeft(remainingTime);

  clearInterval(timerId);

  timerId = setInterval(() => {
    remainingTime--;
    displayTimeLeft(remainingTime);

    if (remainingTime <= 0) {
      clearInterval(timerId);
      if (currentLevel < 3) {
        nextLevel();
      } else {
        endGame(false);
      }
    }
  }, 1000);
}

function startGlobalTimer() {
  const timerDisplay = document.getElementById('totalTimeDisplay');
  timerInterval = setInterval(() => {
    totalTime++;
    const minutes = String(Math.floor(totalTime / 60)).padStart(2, '0');
    const seconds = String(totalTime % 60).padStart(2, '0');
    timerDisplay.textContent = `–û–±—â–µ–µ –≤—Ä–µ–º—è: ${minutes}:${seconds}`;
  }, 1000);
}

function stopGlobalTimer() {
  clearInterval(timerInterval);
}

// ------------------------------------------------
// 3) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö
// ------------------------------------------------

function generateQuestion() {
  // –°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
  const randomIndex = Math.floor(Math.random() * questions.length);
  const question = questions[randomIndex];
  showQuestion(question);

  // –°–º–µ—à–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö
  const chosenAnimals = shuffleArray([...animals]);

  // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤ —á–µ—Ç—ã—Ä—ë—Ö —Ç–æ—á–Ω–æ –µ—Å—Ç—å ¬´–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π¬ª
  const correctAnimal = animals.find(an => an[question.property] === question.value);
  if (correctAnimal && !chosenAnimals.includes(correctAnimal)) {
    chosenAnimals[Math.floor(Math.random() * chosenAnimals.length)] = correctAnimal;
  }

  showAnimals(chosenAnimals, question);
}

function showQuestion(q) {
  const questionElem = document.getElementById('question');
  questionElem.textContent = q.text;
}

function showAnimals(animalList, question) {
  const container = document.getElementById('animalContainer');
  container.innerHTML = ''; // –°—Ç–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–≤–µ—Ä–µ–π

  animalList.forEach(animal => {
    const img = document.createElement('img');
    img.src = `assets/${getImageName(animal.name)}`;
    img.alt = animal.name;

    // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏
    img.classList.add(getAnimationClass(animal.name));

    // –ü—Ä–∏ –∫–ª–∏–∫–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    img.addEventListener('click', () => {
      checkAnswer(animal, question);
    });

    container.appendChild(img);
  });
}

// ------------------------------------------------
// 4) –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Ä–∞—É–Ω–¥–∞–º–∏
// ------------------------------------------------

function checkAnswer(chosenAnimal, question) {
  let correctScore, wrongScore;
  switch (currentLevel) {
    case 1:
      correctScore = 10;
      wrongScore  = 5;
      break;
    case 2:
      correctScore = 15;
      wrongScore  = 10;
      break;
    case 3:
      correctScore = 20;
      wrongScore  = 10;
      break;
  }

  if (chosenAnimal[question.property] === question.value) {
    score += correctScore;
    document.getElementById('scoreDisplay').textContent = `–û—á–∫–∏: ${score}`;

    playAnimalSound(chosenAnimal.name);
    animateCorrect(chosenAnimal.name);

    clearInterval(timerId); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è

    setTimeout(() => {
      startRoundTimer(remainingTime); // –ü–µ—Ä–µ–¥–∞—ë–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è, –∞ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
      generateQuestion();
    }, 1000);

  } else {
    score -= wrongScore;
    document.getElementById('scoreDisplay').textContent = `–û—á–∫–∏: ${score}`;
    animateWrong(chosenAnimal.name);
  }
}

function endRound(success) {
  clearInterval(timerId);

  if (success) {
    currentRound++;
    // 3 —Ä–∞—É–Ω–¥–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å
    if (currentRound > 3) {
      nextLevel();
    } else {
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É —ç—Ç–æ–≥–æ –∂–µ —É—Ä–æ–≤–Ω—è
      startGame();
    }
  } else {
    // –ü—Ä–æ–∏–≥—Ä—ã—à (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)
    endGame();
  }
}

function nextLevel() {
  if (currentLevel >= 3) {
    endGame();
  } else {
    currentLevel++;
    showLevelTransition(currentLevel);

    setTimeout(() => {
      startGame();
    }, 2000);
  }
}


// ------------------------------------------------
// 5) –§–∏–Ω–∏—à –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
// ------------------------------------------------

function endGame() {
  stopGlobalTimer();
  saveResult();

  if (score >= 300) {
    showEndMessage("üéâ –ü–æ–±–µ–¥–∞! üéâ", "#28a745"); // –ó–µ–ª—ë–Ω—ã–π —Ñ–æ–Ω
    startFireworks();
  } else {
    showEndMessage("‚è≥ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ù—É–∂–Ω–æ 300 –æ—á–∫–æ–≤!", "#dc3545"); // –ö—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω
  }

  setTimeout(() => {
    window.location.href = 'rating.html';
  }, 3000);
}


function showEndMessage(text, bgColor) {
  const endMessage = document.createElement("div");
  endMessage.textContent = text;
  endMessage.style.position = "fixed";
  endMessage.style.top = "50%";
  endMessage.style.left = "50%";
  endMessage.style.transform = "translate(-50%, -50%)";
  endMessage.style.padding = "20px";
  endMessage.style.fontSize = "2rem";
  endMessage.style.fontWeight = "bold";
  endMessage.style.color = "#fff";
  endMessage.style.background = bgColor;
  endMessage.style.borderRadius = "10px";
  endMessage.style.boxShadow = "0 4px 10px rgba(0, 0, 0, 0.3)";
  document.body.appendChild(endMessage);
}


function saveResult() {
  const playerName = localStorage.getItem('playerName') || '–ê–Ω–æ–Ω–∏–º';
  let rating = JSON.parse(localStorage.getItem('rating') || '[]');

  rating.push({ 
    name: playerName, 
    score, 
    totalTime 
  });
  rating.sort((a, b) => b.score - a.score);
  localStorage.setItem('rating', JSON.stringify(rating));
}

// ------------------------------------------------
// 6) –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: –∞–Ω–∏–º–∞—Ü–∏–∏, –∑–≤—É–∫–∏, ...
// ------------------------------------------------

function playAnimalSound(animalName) {
  let soundFile = '';
  switch (animalName) {
    case '–°–ª–æ–Ω':    soundFile = 'elephant.mp3'; break;
    case '–£—Ç–∫–∞':    soundFile = 'duck.mp3';     break;
    case '–ö–µ–Ω–≥—É—Ä—É': soundFile = 'kangaroo.mp3'; break;
    case '–í–µ—Ä–±–ª—é–¥': soundFile = 'camel.mp3';    break;
    case '–î–µ–ª—å—Ñ–∏–Ω': soundFile = 'dolphin.mp3';    break;
    case '–û—Ä–µ–ª': soundFile = 'eagle.mp3';    break;
    case '–ú–µ–¥–≤–µ–¥—å': soundFile = 'bear.mp3';    break;
    case '–ß–µ—Ä–µ–ø–∞—Ö–∞': soundFile = 'tortila.mp3';    break; 
    case '–ö—Ä–æ–∫–æ–¥–∏–ª': soundFile = 'crocodile.mp3';    break;
  }
  if (soundFile) {
    const audio = new Audio(`assets/sounds/${soundFile}`);
    audio.play();
  }
}

function displayTimeLeft(t) {
  document.getElementById('roundTimer').textContent = `–û—Å—Ç–∞–ª–æ—Å—å: ${t} c–µ–∫.`;
}

function shuffleArray(arr) {
  return arr.sort(() => Math.random() - 0.5);
}

function animateCorrect(animalName) {
  const imgs = document.querySelectorAll('#animalContainer img');
  imgs.forEach(img => {
    if (img.alt === animalName) {
      img.classList.add('correct');
      setTimeout(() => {
        img.remove();
      }, 1000);
    }
  });
}

function animateWrong(animalName) {
  const imgs = document.querySelectorAll('#animalContainer img');
  let found = false;

  imgs.forEach(img => {
    if (img.alt.trim().toLowerCase() === animalName.trim().toLowerCase()) {
      img.classList.add('wrong-shake');
      found = true;
      setTimeout(() => {
        img.classList.remove('wrong-shake');
      }, 500);
    }
  });

  if (!found) {
    console.warn(`–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è: ${animalName}`);
  }
}

function getImageName(animalName) {
  switch (animalName) {
    case '–°–ª–æ–Ω':    return 'elephant.png';
    case '–£—Ç–∫–∞':    return 'duck.png';
    case '–ö–µ–Ω–≥—É—Ä—É': return 'kenguru.png';
    case '–í–µ—Ä–±–ª—é–¥': return 'camel.png';
    case '–î–µ–ª—å—Ñ–∏–Ω': return 'dolphin.png';
    case '–û—Ä–µ–ª': return 'eagle.png';
    case '–ú–µ–¥–≤–µ–¥—å': return 'bear.png';
    case '–ß–µ—Ä–µ–ø–∞—Ö–∞': return 'tortila.png';
    case '–ö—Ä–æ–∫–æ–¥–∏–ª': return 'crocodile.png';
  }
}

function getAnimationClass(animalName) {
  switch (animalName) {
    case '–°–ª–æ–Ω': return 'elephant-walk';
    case '–£—Ç–∫–∞': return 'duck-swim';
    case '–ö–µ–Ω–≥—É—Ä—É': return 'kangaroo-jump';
    case '–í–µ—Ä–±–ª—é–¥': return 'camel-walk';
    case '–î–µ–ª—å—Ñ–∏–Ω': return 'dolphin-swim';
    case '–û—Ä–µ–ª': return 'eagle-fly';
    case '–ú–µ–¥–≤–µ–¥—å': return 'bear-walk';
    case '–ß–µ—Ä–µ–ø–∞—Ö–∞': return 'turtle-crawl';
    case '–ö—Ä–æ–∫–æ–¥–∏–ª': return 'crocodile-swim';
    default: return '';
  }
}

// ------------------------------------------------
// 7) –ö–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å" ‚Äì –¥–æ—Å—Ä–æ—á–Ω—ã–π –≤—ã—Ö–æ–¥
// ------------------------------------------------

document.getElementById('exitBtn').addEventListener('click', () => {
  if (currentLevel < 3) {
    nextLevel();
  } else {
    endGame(true);
  }
});

function showLevelTransition(levelNumber) {
  const levelTransition = document.getElementById('levelTransition');
  levelTransition.textContent = `–£—Ä–æ–≤–µ–Ω—å ${levelNumber}!`;
  levelTransition.style.opacity = '1';

  setTimeout(() => {
    levelTransition.style.opacity = '0';
  }, 2000);
}

function startFireworks() {
  const canvas = document.getElementById("fireworkCanvas");
  if (!canvas) return; // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç, –≤—ã—Ö–æ–¥–∏–º

  const ctx = canvas.getContext("2d");
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
  canvas.style.display = "block";

  let particles = [];

  function createParticle(x, y) {
    const colors = ["#ff5733", "#ffbd33", "#33ff57", "#3357ff", "#f033ff"];
    return {
      x,
      y,
      radius: Math.random() * 3 + 2,
      color: colors[Math.floor(Math.random() * colors.length)],
      speedX: (Math.random() - 0.5) * 5,
      speedY: (Math.random() - 0.5) * 5,
      life: 50,
    };
  }

  function drawParticles() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    particles.forEach((p, i) => {
      ctx.beginPath();
      ctx.arc(p.x, p.y, p.radius, 0, Math.PI * 2);
      ctx.fillStyle = p.color;
      ctx.fill();
      p.x += p.speedX;
      p.y += p.speedY;
      p.life--;
      if (p.life <= 0) particles.splice(i, 1);
    });

    if (particles.length > 0) {
      requestAnimationFrame(drawParticles);
    } else {
      setTimeout(() => {
        canvas.style.display = "none"; // –£–±–∏—Ä–∞–µ–º —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      }, 3000);
    }
  }

  for (let i = 0; i < 100; i++) {
    particles.push(createParticle(canvas.width / 2, canvas.height / 2));
  }

  drawParticles();
}

